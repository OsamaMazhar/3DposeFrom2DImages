// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POINT2DSKELETON_MY_SKELETON_H_
#define FLATBUFFERS_GENERATED_POINT2DSKELETON_MY_SKELETON_H_

#include "flatbuffers/flatbuffers.h"

namespace my_skeleton {

struct Point;

struct skeleton2d;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Point FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;

 public:
  Point() {
    memset(this, 0, sizeof(Point));
  }
  Point(int32_t _x, int32_t _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  int32_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  int32_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Point, 8);

struct skeleton2d FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_COORDINATES = 6,
    VT_NUMBER_OF_POINTS = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<const Point *> *coordinates() const {
    return GetPointer<const flatbuffers::Vector<const Point *> *>(VT_COORDINATES);
  }
  int32_t number_of_points() const {
    return GetField<int32_t>(VT_NUMBER_OF_POINTS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_COORDINATES) &&
           verifier.Verify(coordinates()) &&
           VerifyField<int32_t>(verifier, VT_NUMBER_OF_POINTS) &&
           verifier.EndTable();
  }
};

struct skeleton2dBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(skeleton2d::VT_NAME, name);
  }
  void add_coordinates(flatbuffers::Offset<flatbuffers::Vector<const Point *>> coordinates) {
    fbb_.AddOffset(skeleton2d::VT_COORDINATES, coordinates);
  }
  void add_number_of_points(int32_t number_of_points) {
    fbb_.AddElement<int32_t>(skeleton2d::VT_NUMBER_OF_POINTS, number_of_points, 0);
  }
  explicit skeleton2dBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  skeleton2dBuilder &operator=(const skeleton2dBuilder &);
  flatbuffers::Offset<skeleton2d> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<skeleton2d>(end);
    return o;
  }
};

inline flatbuffers::Offset<skeleton2d> Createskeleton2d(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Point *>> coordinates = 0,
    int32_t number_of_points = 0) {
  skeleton2dBuilder builder_(_fbb);
  builder_.add_number_of_points(number_of_points);
  builder_.add_coordinates(coordinates);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<skeleton2d> Createskeleton2dDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<Point> *coordinates = nullptr,
    int32_t number_of_points = 0) {
  return my_skeleton::Createskeleton2d(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      coordinates ? _fbb.CreateVectorOfStructs<Point>(*coordinates) : 0,
      number_of_points);
}

inline const my_skeleton::skeleton2d *Getskeleton2d(const void *buf) {
  return flatbuffers::GetRoot<my_skeleton::skeleton2d>(buf);
}

inline const my_skeleton::skeleton2d *GetSizePrefixedskeleton2d(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<my_skeleton::skeleton2d>(buf);
}

inline bool Verifyskeleton2dBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<my_skeleton::skeleton2d>(nullptr);
}

inline bool VerifySizePrefixedskeleton2dBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<my_skeleton::skeleton2d>(nullptr);
}

inline void Finishskeleton2dBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<my_skeleton::skeleton2d> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedskeleton2dBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<my_skeleton::skeleton2d> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace my_skeleton

#endif  // FLATBUFFERS_GENERATED_POINT2DSKELETON_MY_SKELETON_H_
